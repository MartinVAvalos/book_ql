import { Client as e, createRequest as u } from "@urql/core";

export * from "@urql/core";

import { isRef as r, ref as a, getCurrentInstance as t, provide as l, inject as s, reactive as n, shallowRef as i, watchEffect as o, onBeforeUnmount as v, onMounted as c } from "vue";

import { subscribe as p, onEnd as f, toPromise as d, take as h, filter as y, onPush as b } from "wonka";

var q = new WeakMap;

function provideClient(u) {
  var s;
  if (!r(u)) {
    s = a(u instanceof e ? u : new e(u));
  } else {
    s = u;
  }
  var n = t();
  if (n) {
    q.set(n, s);
  }
  l("$urql", s);
  return s.value;
}

function install(u, t) {
  var l;
  if (!r(t)) {
    l = a(t instanceof e ? t : new e(t));
  } else {
    l = t;
  }
  u.provide("$urql", l);
}

function useClient() {
  var e = t();
  if ("production" !== process.env.NODE_ENV && !e) {
    throw new Error("use* functions may only be called during the `setup()` or other lifecycle hooks.");
  }
  var u = s("$urql");
  if (!u && e) {
    u = q.get(e);
  }
  if ("production" !== process.env.NODE_ENV && !u) {
    throw new Error("No urql Client was provided. Did you forget to install the plugin or call `provideClient` in a parent?");
  }
  return u;
}

var unref = e => "function" == typeof e ? e() : null != e && r(e) ? e.value : e;

var updateShallowRef = (e, u) => {
  for (var r in u) {
    if (e.value[r] !== u[r]) {
      e.value = u;
      return;
    }
  }
};

var x = {
  flush: "pre"
};

function useQuery(e) {
  return callUseQuery(e);
}

function callUseQuery(e, r = useClient(), t = []) {
  var l = n(e);
  var s = a();
  var v = a(!1);
  var c = a(!1);
  var d = a();
  var h = a();
  var y = a();
  var b = a(!!unref(l.pause));
  var q = i({
    request: u(unref(l.query), unref(l.variables)),
    requestPolicy: unref(l.requestPolicy),
    isPaused: b.value
  });
  var P = a();
  t.push(o((() => {
    updateShallowRef(q, {
      request: u(unref(l.query), unref(l.variables)),
      requestPolicy: unref(l.requestPolicy),
      isPaused: b.value
    });
  }), x));
  t.push(o((() => {
    P.value = !q.value.isPaused ? r.value.executeQuery(q.value.request, {
      requestPolicy: unref(l.requestPolicy),
      ...unref(l.context)
    }) : void 0;
  }), x));
  var w = {
    data: s,
    stale: v,
    error: d,
    operation: h,
    extensions: y,
    fetching: c,
    isPaused: b,
    executeQuery(e) {
      var u = P.value = r.value.executeQuery(q.value.request, {
        requestPolicy: unref(l.requestPolicy),
        ...unref(l.context),
        ...e
      });
      return {
        ...E,
        then(e, r) {
          var a;
          return new Promise((e => {
            var r = !1;
            a = p((() => {
              if (!w.fetching.value && !w.stale.value) {
                if (a) {
                  a.unsubscribe();
                }
                r = !0;
                e(w);
              }
            }))(u);
            if (r) {
              a.unsubscribe();
            }
          })).then(e, r);
        }
      };
    },
    pause() {
      b.value = !0;
    },
    resume() {
      b.value = !1;
    }
  };
  t.push(o((e => {
    if (P.value) {
      c.value = !0;
      v.value = !1;
      e(p((e => {
        s.value = e.data;
        v.value = !!e.stale;
        c.value = !1;
        d.value = e.error;
        h.value = e.operation;
        y.value = e.extensions;
      }))(f((() => {
        c.value = !1;
        v.value = !1;
      }))(P.value)).unsubscribe);
    } else {
      c.value = !1;
      v.value = !1;
    }
  }), {
    flush: "sync"
  }));
  var E = {
    ...w,
    then(e, u) {
      var r;
      return new Promise((e => {
        if (!P.value) {
          return e(w);
        }
        var u = !1;
        r = p((() => {
          if (!w.fetching.value && !w.stale.value) {
            if (r) {
              r.unsubscribe();
            }
            u = !0;
            e(w);
          }
        }))(P.value);
        if (u) {
          r.unsubscribe();
        }
      })).then(e, u);
    }
  };
  return E;
}

function useMutation(e) {
  return callUseMutation(e);
}

function callUseMutation(e, r = useClient()) {
  var t = a();
  var l = a(!1);
  var s = a(!1);
  var n = a();
  var i = a();
  var o = a();
  return {
    data: t,
    stale: l,
    fetching: s,
    error: n,
    operation: i,
    extensions: o,
    executeMutation(a, v) {
      s.value = !0;
      return d(h(1)(y((e => !e.hasNext))(b((e => {
        t.value = e.data;
        l.value = e.stale;
        s.value = !1;
        n.value = e.error;
        i.value = e.operation;
        o.value = e.extensions;
      }))(r.value.executeMutation(u(unref(e), unref(a)), v || {})))));
    }
  };
}

var P = {
  flush: "pre"
};

function useSubscription(e, u) {
  return callUseSubscription(e, u);
}

function callUseSubscription(e, r, t = useClient(), l = []) {
  var s = n(e);
  var v = a();
  var c = a(!1);
  var d = a(!1);
  var h = a();
  var y = a();
  var b = a();
  var q = a(r);
  var x = a(!!unref(s.pause));
  var w = i({
    request: u(unref(s.query), unref(s.variables)),
    isPaused: x.value
  });
  var E = a();
  l.push(o((() => {
    updateShallowRef(w, {
      request: u(unref(s.query), unref(s.variables)),
      isPaused: x.value
    });
  }), P));
  l.push(o((() => {
    E.value = !x.value ? t.value.executeSubscription(w.value.request, {
      ...unref(s.context)
    }) : void 0;
  }), P));
  l.push(o((e => {
    if (E.value) {
      d.value = !0;
      e(p((e => {
        d.value = !0;
        v.value = null != e.data ? "function" == typeof q.value ? q.value(v.value, e.data) : e.data : e.data;
        h.value = e.error;
        b.value = e.extensions;
        c.value = !!e.stale;
        y.value = e.operation;
      }))(f((() => {
        d.value = !1;
      }))(E.value)).unsubscribe);
    } else {
      d.value = !1;
    }
  }), P));
  var m = {
    data: v,
    stale: c,
    error: h,
    operation: y,
    extensions: b,
    fetching: d,
    isPaused: x,
    executeSubscription(e) {
      E.value = t.value.executeSubscription(w.value.request, {
        ...unref(s.context),
        ...e
      });
      return m;
    },
    pause() {
      x.value = !0;
    },
    resume() {
      x.value = !1;
    }
  };
  return m;
}

function useClientHandle() {
  var e = useClient();
  var u = [];
  v((() => {
    var e;
    while (e = u.shift()) {
      e();
    }
  }));
  var r = {
    client: e.value,
    useQuery: r => callUseQuery(r, e, u),
    useSubscription: (r, a) => callUseSubscription(r, a, e, u),
    useMutation: u => callUseMutation(u, e)
  };
  if ("production" !== process.env.NODE_ENV) {
    c((() => {
      Object.assign(r, {
        useQuery(r) {
          if ("production" !== process.env.NODE_ENV && !t()) {
            throw new Error("`handle.useQuery()` should only be called in the `setup()` or a lifecycle hook.");
          }
          return callUseQuery(r, e, u);
        },
        useSubscription(r, a) {
          if ("production" !== process.env.NODE_ENV && !t()) {
            throw new Error("`handle.useSubscription()` should only be called in the `setup()` or a lifecycle hook.");
          }
          return callUseSubscription(r, a, e, u);
        }
      });
    }));
  }
  return r;
}

export { install as default, install, provideClient, useClientHandle, useMutation, useQuery, useSubscription };
//# sourceMappingURL=urql-vue.mjs.map
